# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000


Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Вывод сети и маски должен быть упорядочен также, как в примере:
- столбцами
- ширина столбца 10 символов (в двоичном формате
  надо добавить два пробела между столбцами
  для разделения октетов между собой)


Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""


subnet = input('Input subnet address: ')
subnet_list = subnet.replace('/', '.').split('.')
oct1 = int(subnet_list[0])
oct2 = int(subnet_list[1])
oct3 = int(subnet_list[2])
oct4 = int(subnet_list[3])
mask = int(subnet_list[4])

ip_bin_str = "{:08b}{:08b}{:08b}{:08b}".format(oct1, oct2, oct3, oct4)
bin_netw_str = ip_bin_str[:mask] + '0' * (32 - mask)
oct1_str = int(bin_netw_str[0:8], 2)
oct2_str = int(bin_netw_str[8:16], 2)
oct3_str = int(bin_netw_str[16:24], 2)
oct4_str = int(bin_netw_str[24:32], 2)

mask_bin_str = "1" * mask + "0" * (32 - mask)
mask_int_oct1 = int(mask_bin_str[0:8], 2)
mask_int_oct2 = int(mask_bin_str[8:16], 2)
mask_int_oct3 = int(mask_bin_str[16:24], 2)
mask_int_oct4 = int(mask_bin_str[24:32], 2)

template_network = '''
Network:
{0:<8} {1:<8} {2:<8} {3:<8}
{0:08b} {1:08b} {2:08b} {3:08b}'''

template_mask = '''
Mask:
/{0}
{1:<8} {2:<8} {3:<8} {4:<8}
{1:08b} {2:08b} {3:08b} {4:08b}
'''

print(template_network.format(oct1_str, oct2_str, oct3_str, oct4_str))
print(template_mask.format(mask, mask_int_oct1, mask_int_oct2, mask_int_oct3, mask_int_oct4))