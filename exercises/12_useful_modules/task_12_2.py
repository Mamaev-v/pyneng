# -*- coding: utf-8 -*-
"""
Задание 12.2


Функция ping_ip_addresses из задания 12.1 принимает только список адресов,
но было бы удобно иметь возможность указывать адреса с помощью диапазона,
например, 192.168.100.1-10.

В этом задании необходимо создать функцию convert_ranges_to_ip_list,
которая конвертирует список IP-адресов в разных форматах в список,
где каждый IP-адрес указан отдельно.

Функция ожидает как аргумент список, в котором содержатся IP-адреса
и/или диапазоны IP-адресов.

Элементы списка могут быть в формате:
* 10.1.1.1
* 10.1.1.1-10.1.1.10
* 10.1.1.1-10

Если адрес указан в виде диапазона, надо развернуть диапазон в отдельные
адреса, включая последний адрес диапазона.
Для упрощения задачи, можно считать, что в диапазоне всегда меняется только
последний октет адреса.

Функция возвращает список IP-адресов.

Например, если передать функции convert_ranges_to_ip_list такой список:
['8.8.4.4', '1.1.1.1-3', '172.21.41.128-172.21.41.132']

Функция должна вернуть такой список:
['8.8.4.4', '1.1.1.1', '1.1.1.2', '1.1.1.3', '172.21.41.128',
 '172.21.41.129', '172.21.41.130', '172.21.41.131', '172.21.41.132']

"""
#from dataclasses import replace
#import ipaddress
#from posixpath import split

def convert_ranges_to_ip_list(list):
    ip_list = []
    for ip in list:
        if "-" in ip:
            range_ip = ip.split("-")
            temp_ip = range_ip[0].split(".")
            temp_ip_2 = temp_ip[0] + "." + temp_ip[1] + "." + temp_ip[2] + "."
            range_start = int(range_ip[0].split(".")[3])
            if "." in range_ip[1]:
                range_stop = int(range_ip[1].split(".")[3])
            else:
                range_stop = int(range_ip[1])
            for i in range(range_start, range_stop+1):
                host = temp_ip_2 + str(i)
                ip_list.append(host)
        else:
            ip_list.append(ip)
    return ip_list

if __name__ == "__main__":
    print(convert_ranges_to_ip_list(['8.8.4.4', '1.1.1.1-3', '172.21.41.128-172.21.41.132']))